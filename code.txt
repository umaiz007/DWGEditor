==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\App.css ====
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\App.js ====
import { Fragment, useRef } from "react";
// import Viewer from './components/viewer/Viewer';
import Router from "./router/Router";
import { BrowserRouter } from 'react-router-dom';



// const { REACT_APP_APS_URN } = process.env;

function App() {
  const viewerRef = useRef();

  // const onModelError = (error) => {
  //   console.error(error);
  // };

  // const onModelLoaded = (viewer) => {
  //   console.log("%cModel loaded Successfully!", "color: #c92a2a");
  // };

  return (
    <Fragment>
      <div style={{ position: "absolute", width: "100%", height: "100%" }} ref={viewerRef} />
      <BrowserRouter>
        <Router />

      </BrowserRouter>
      {/* <Viewer
        viewerRef={viewerRef}
        urn={REACT_APP_APS_URN}
        modelGuid=""
        onModelLoaded={onModelLoaded}
        onModelError={onModelError}
      /> */}
    </Fragment>
  );
}

export default App;
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\App.test.js ====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\index.css ====
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\index.js ====
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  // <React.StrictMode>
  <App />
  // </React.StrictMode>
);

==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\logo.svg ====
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\components\ApsCallback.js ====
import React from 'react';
import useApsAuth from '../hooks/useApsAuth';
import Viewer from './viewer/Viewer';
import { Fragment, useRef } from "react";

const { REACT_APP_APS_URN } = process.env;

const ApsCallback = () => {
    const apsAuth = useApsAuth('code')

    const viewerRef = useRef();

    const onModelError = (error) => {
        console.error(error);
    };

    const onModelLoaded = (viewer) => {
        console.log("%cModel loaded Successfully!", "color: #c92a2a");
        console.log("Time Taken", new Date() - window.time);
    };
    if (apsAuth.isTokenSet) {
        return (<Fragment>
            <div style={{ position: "absolute", width: "100%", height: "100%" }} ref={viewerRef} />
            <Viewer
                viewerRef={viewerRef}
                urn={REACT_APP_APS_URN}
                modelGuid=""
                extensions={[]}
                onModelLoaded={onModelLoaded}
                onModelError={onModelError}
            />
        </Fragment>)

    } else {
        return (
            <div>
                loading
            </div>
        );
    }

}

export default ApsCallback;
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\components\ApsLogin.js ====
import { Button } from '@mui/material';
const { REACT_APP_APS_CLIENT_ID, REACT_APP_CALLBACK_URL } = process.env;

function ApsLogin() {

    function onButtonClick() {
        const url = 'https://developer.api.autodesk.com/authentication/v2/authorize';
        const responseType = 'code';
        const scope = encodeURI('data:read data:write data:create');
        const authUrl = `${url}?response_type=${responseType}&client_id=${REACT_APP_APS_CLIENT_ID}&redirect_uri=${REACT_APP_CALLBACK_URL}&scope=${scope}`;

        window.location.href = authUrl;
    }
    return (<Button variant="contained" onClick={onButtonClick}>Autodesk Login</Button>)

}

export default ApsLogin;==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\components\index.js ====
export { default as Viewer } from './viewer/Viewer';
export { default as ApsCallback } from './ApsCallback';
export { default as ApsLogin } from './ApsLogin';==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\components\viewer\viewer.css ====
.adsk-viewing-viewer.dark-theme .adsk-control-group {
  border-radius: 13px;
  background-color: #012131;
}

.adsk-viewing-viewer.dark-theme .adsk-button:hover {
  border-radius: 13px;
}

.adsk-button.active {
  border-radius: 13px !important;
}
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\components\viewer\Viewer.js ====
/* global Autodesk */

/* Uncomment the code which is commented to render model using two legged */
import { useState, useEffect, useRef } from 'react';
import './viewer.css';
import { initViewer, loadModel } from './ViewerFunction';
// import { getTwoLeggedAccessToken } from '../../utils/authentication/TwoLeggedAccessToken';

const Viewer = ({ viewerRef, urn, modelGuid, extensions = [], onModelLoaded, onModelError }) => {
    window.time = new Date();
    let apsToken = localStorage.getItem("apsToken");
    apsToken = JSON.parse(apsToken);

    const [isLoading, setIsLoading] = useState(true);
    const viewer = useRef(null);
    console.log(apsToken.access_token);

    useEffect(() => {
        const options = {
            api: 'streamingV2',
            env: 'AutodeskProduction2',
            accessToken: apsToken.access_token
            // getAccessToken: getTwoLeggedAccessToken
        };

        (async () => {
            try {
                viewer.current = await initViewer(viewerRef.current, options, extensions);
                await loadModel(viewer.current, urn, modelGuid);
                setIsLoading(false);

                viewer.current.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, async () => {
                    window.asp_viewer = viewer.current;

                    onModelLoaded(viewer.current);
                });
            } catch (e) {
                setIsLoading(false);
                onModelError(e);
            }
        })();

        return () => {
            if (viewer.current) {
                viewer.current.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT);
                viewer.current.finish();
                viewer.current = null;
                window.asp_viewer = null;
            }
        };
    }, [viewerRef, urn, modelGuid, extensions, onModelLoaded, onModelError]);

    if (isLoading) return <h2 className='loading'>Loading...</h2>;

    return null;
};

export default Viewer;==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\components\viewer\ViewerFunction.js ====
/* global Autodesk */

export function initViewer(container, options, extensions) {
    return new Promise(function (resolve, reject) {
        Autodesk.Viewing.Initializer(options, function () {
            const viewer = new Autodesk.Viewing.GuiViewer3D(container, { extensions });
            viewer.start();
            resolve(viewer);
        });
    });
}

export function loadModel(viewer, urn, guid) {
    return new Promise(function (resolve, reject) {
        function onDocumentLoadSuccess(doc) {
            const viewable = guid ? doc.getRoot().findByGuid(guid) : doc.getRoot().getDefaultGeometry();
            resolve(viewer.loadDocumentNode(doc, viewable));
        }
        function onDocumentLoadFailure(code, message, errors) {
            reject({ code, message, errors });
        }
        Autodesk.Viewing.Document.load('urn:' + urn, onDocumentLoadSuccess, onDocumentLoadFailure);
    });
}
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\hooks\useApsAuth.js ====
import { getThreeLeggedAccessToken } from '../utils/authentication/ThreeLeggedAccessToken';
import { useEffect, useState } from 'react';
import { useSearchParams } from 'react-router-dom';

const useApsAuth = (type = undefined) => {
    const [searchParams] = useSearchParams();

    const [isTokenSet, setIsTokenSet] = useState(false);
    const [isTokenValid, setIsTokenValid] = useState(false);
    const [isTokenExpired, setIsTokenExpired] = useState(false);

    const getApsAccessToken = async () => {
        const code = searchParams.get('code');
        if (!code) {
            console.log("error occured");
        }
        console.log(code)
        const data = await getThreeLeggedAccessToken(code);
        localStorage.setItem('apsToken', JSON.stringify(data));
        setIsTokenSet(true);
    };

    const validateAccessToken = async () => {
        const token = localStorage.getItem('apsToken');
        if (!token) return;
        try {
            const { data } = await getThreeLeggedAccessToken(token);
            if (data?.status_code === 400) {
                setIsTokenExpired(true);
                return;
            }
            localStorage.setItem('apsToken', JSON.stringify(data));
            setIsTokenValid(true);
        } catch (e) {
            console.error(e);
            localStorage.removeItem('apsToken');
            setIsTokenValid(false);
        }
    };

    useEffect(() => {
        if (type === 'code') {
            // localStorage.removeItem('apsToken');
            getApsAccessToken();
        }
        if (type === 'refresh') {
            validateAccessToken();
        }
    }, []);

    return { token: localStorage.getItem('apsToken'), isTokenSet, isTokenValid, isTokenExpired, validateAccessToken };
};

export default useApsAuth;
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\router\Router.js ====
import { Route, Routes } from 'react-router-dom';
import { ApsCallback, ApsLogin } from '../components';

const Router = () => {
    return (
        <Routes>
            <Route path="/" element={<ApsLogin />} />
            <Route path="/callback" element={<ApsCallback />} />

        </Routes>
    );
};

export default Router;
==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\utils\authentication\ThreeLeggedAccessToken.js ====
const getThreeLeggedAccessToken = (code) => {
    return new Promise((resolve, reject) => {
        if (!code) {
            reject('No authorization code found in URL');
            return;
        }

        const encodedCred = btoa(`${process.env.REACT_APP_APS_CLIENT_ID}:${process.env.REACT_APP_APS_CLIENT_SECRET}`);
        const url = "https://developer.api.autodesk.com/authentication/v2/token";
        const headers = new Headers({
            Authorization: `Basic ${encodedCred}`,
            "Content-Type": "application/x-www-form-urlencoded",
        });

        const body = new URLSearchParams({
            'grant_type': 'authorization_code',
            'code': code,
            'redirect_uri': `${process.env.REACT_APP_CALLBACK_URL}`,
        });

        const options = {
            method: 'POST',
            headers,
            body,
        };

        fetch(url, options)
            .then((response) => response.json())
            .then((data) => {
                if (data.error) {
                    reject(data.error_description);
                } else {
                    const expiresInSeconds = data.expires_in;
                    const expiresAt = new Date();
                    expiresAt.setSeconds(expiresAt.getSeconds() + expiresInSeconds);
                    const expireAt = expiresAt.toISOString();
                    const newData = { ...data, 'expires_at': expireAt }
                    // console.log("data", newData)
                    resolve(newData);
                }
            })
            .catch((error) => {
                console.error('Error fetching access token:', error);
                reject(error);
            });
    });
};


export { getThreeLeggedAccessToken };==== E:\Projects\viewer\mfg-vert-fusion-automation-wip-sakshi\src\utils\authentication\TwoLeggedAccessToken.js ====
const getTwoLeggedAccessToken = (callback) => {

    const encodedCred = btoa(`${process.env.REACT_APP_APS_CLIENT_ID}:${process.env.REACT_APP_APS_CLIENT_SECRET}`);

    const url = 'https://developer.api.autodesk.com/authentication/v2/token'
    const headers = new Headers({
        Authorization: `Basic ${encodedCred}`,
        "Content-Type": "application/x-www-form-urlencoded",
    });

    const body = new URLSearchParams({
        'grant_type': 'client_credentials',
        'scope': 'data:read',
    });

    const options = {
        method: 'POST',
        headers: headers,
        body: body,
    };

    fetch(url, options).then((response) => response.json()).then((data) => {
        callback(data.access_token, data.expires_in);
    })
        .catch((error) => {
            console.error('Error fetching access token:', error);
        });

};

export { getTwoLeggedAccessToken };